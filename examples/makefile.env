#
# -- makefile.env
#
# -- This defines the makefile environment used by the sample code in higher folders.
# -- In most cases, all you will need in your Makefile is to include this file and
# -- put your .v or .sv files in a folder named src. One of those files will need to be
# -- the core_top module as defined in https://github.com/open-fpga/core-template.
#
# -- You can also define EXTRA_SRC_FILES before including this file and populate it
# -- with a list of files that need to be copied in the build project but not added to
# -- the Quartus project itself. This is useful for files that are included directly from
# -- a Verilog file.
#
# -- use 'make' to build your core. If you define CORE_INSTALL_VOLUME to be the name
# -- of your pocket SD card then 'make install; will install the core in the right location.
# -- CORE_INSTALL_VOLUME defaults to POCKET. 'make clean' will clean the project.
# 

.PHONY: default
default: all ;

# -- Constants
BUILD_DIR := _build
CORE_TEMPLATE_DIR := $(shell pwd)/$(BUILD_DIR)/pfCoreTemplate
ifeq ($(.SHELLSTATUS), 1)
 $(error $(CORE_TEMPLATE_DIR))
endif
SRC_VERILOG_DIR := src
DEST_VERILOG_DIR := $(CORE_TEMPLATE_DIR)/src/fpga/core
CONFIG_FILE := src/config.toml
DEPENDENCY_FILE := $(BUILD_DIR)/deps.d
QUARTUS_CMD_LINE_PREFIX = docker run --platform linux/amd64 -t --rm -v $(CORE_TEMPLATE_DIR)/src/fpga:/build didiermalenfant/quartus:22.1-apple-silicon

# -- If CORE_INSTALL_VOLUME is not defined, we default to POCKET
ifeq ($(CORE_INSTALL_VOLUME),)
CORE_INSTALL_VOLUME := POCKET
endif

# -- If QUARTUS_NUM_PROCESSORS_TO_USE is not defined, we default to all of them
ifeq ($(QUARTUS_NUM_PROCESSORS_TO_USE),)
QUARTUS_NUM_PROCESSORS_TO_USE := max
endif

# -- Bitstream file generated by the Quartus project
BITSTREAM_FILE := $(shell pfBuildCore --bitstreamfile $(CONFIG_FILE))
ifeq ($(.SHELLSTATUS), 1)
 $(error $(BITSTREAM_FILE))
endif

# -- Final core filename based on the project's configuration
CORE_FILE := _build/$(shell pfBuildCore --corefilename $(CONFIG_FILE))
ifeq ($(.SHELLSTATUS), 1)
 $(error $(CORE_FILE))
endif

# -- Source files
SRC_VERILOG_FILES := $(shell find $(SRC_VERILOG_DIR) -name "*.v")
ifeq ($(.SHELLSTATUS), 1)
 $(error $(SRC_VERILOG_FILES))
endif
VERILOG_FILES := $(SRC_VERILOG_FILES:$(SRC_VERILOG_DIR)/%.v=$(DEST_VERILOG_DIR)/%.v)

SRC_SYSTEM_VERILOG_FILES := $(shell find $(SRC_VERILOG_DIR) -name "*.sv")
ifeq ($(.SHELLSTATUS), 1)
 $(error $(SRC_SYSTEM_VERILOG_FILES))
endif
SYSTEM_VERILOG_FILES := $(SRC_SYSTEM_VERILOG_FILES:$(SRC_VERILOG_DIR)/%.sv=$(DEST_VERILOG_DIR)/%.sv)

EXTRA_DEST_FILES := $(EXTRA_SRC_FILES:$(SRC_VERILOG_DIR)/%=$(DEST_VERILOG_DIR)/%)

# -- Rules
$(CORE_TEMPLATE_DIR):
	$(info Cloning the core compilation environment...)
	@mkdir -p $(BUILD_DIR)
	@pfCloneCoreTemplate --tag v.0.0.2_for_pfCore $(BUILD_DIR)

$(BITSTREAM_FILE): $(CORE_TEMPLATE_DIR) $(VERILOG_FILES) $(SYSTEM_VERILOG_FILES) $(EXTRA_DEST_FILES)
	$(info Building bitstream file...)
	$(info $(SRC_SYSTEM_VERILOG_FILES:$(SRC_VERILOG_DIR)/%.sv=core/%.sv) $(SRC_VERILOG_FILES:$(SRC_VERILOG_DIR)/%.v=%.v))
	@pfQuartusEdit --numcpus $(QUARTUS_NUM_PROCESSORS_TO_USE) --qsf $(CORE_TEMPLATE_DIR)/src/fpga/ap_core.qsf $(SRC_SYSTEM_VERILOG_FILES:$(SRC_VERILOG_DIR)/%.sv=core/%.sv) $(SRC_VERILOG_FILES:$(SRC_VERILOG_DIR)/%.v=core/%.v)
	@$(QUARTUS_CMD_LINE_PREFIX) quartus_sh --flow compile ap_core

$(CORE_FILE): $(BITSTREAM_FILE) $(CONFIG_FILE)
	$(info Building core...)
	@pfBuildCore $(CONFIG_FILE) $(BUILD_DIR)

# -- The .SECONDEXPANSION: is needed to enable the $$ rules for GNU Make.
# -- It is needed to allow target based substitution rules in the prerequisites for $(C_OBJECTS) and $(ASM_OBJECTS).
.SECONDEXPANSION:
	
# -- The prerequisite $$(patsubst $(BUILD_DIR)/%.o,$(SRC_DIR)/%.c,$$@) is saying,
# -- that the current target depends on a specific source file with the same folder structure and name.
$(VERILOG_FILES): $$(patsubst $(DEST_VERILOG_DIR)/%.v,$(SRC_VERILOG_DIR)/%.v,$$@)
	$(info Updating $<...)
	@mkdir -p $(@D)
	@cp $< $@

$(SYSTEM_VERILOG_FILES): $$(patsubst $(DEST_VERILOG_DIR)/%.sv,$(SRC_VERILOG_DIR)/%.sv,$$@)
	$(info Updating $<...)
	@mkdir -p $(@D)
	@cp $< $@

$(EXTRA_DEST_FILES): $$(patsubst $(DEST_VERILOG_DIR)/%,$(SRC_VERILOG_DIR)/%,$$@)
	$(info Updating $<...)
	@mkdir -p $(@D)
	@cp $< $@
	
all: $(CORE_FILE) 
	@:

install: $(CORE_FILE)
	@pfInstallCore --eject $(CORE_FILE) /Volumes/$(CORE_INSTALL_VOLUME)/

clean:
	$(info Cleaning project.)
	@rm -Rf $(BUILD_DIR)

# -- Include any dependency files generated by the core building script.
-include $(BUILD_DIR)/deps.d
